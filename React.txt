REACT

Client-side Javascript Library
Building modern reactive user interfaces for the web
Declarative component focussed approach
Lean and focussed component based UI library, certain features like routing are added via community packages
React makes building complex, interactive and reactive user interfaces simpler
React is all about Components

Multi Page Application -> Widget approach on a multi page application. Some pages are still rendered on and served by a backend server

Single Page Applications(SPA) -> In SPA, server sends only one HTML page. Thereafter React takes over and control the UI
React can be used to control parts of HTML pages or entire pages
React can also be used to control the entire front end of the web application

React.js - Lean and focussed component based UI library. Certain features (eg.routing) are added via community packages
Angular - Complete component based UI framework packed with features. Uses TypeScript. Can be overkill for smaller projects
Vue.js - Complete component based UI framework, includes most core features. A bit less popular than react and angular


Javascript - Imperative approach
Runs in the browser on the loaded page. You can manipulate the HTML structure(DOM) on the page

KEY FEATURES  (basics and foundation)
  Components and Building UI
  Working with events and data: "props" and "state"
  Styling React apps and Components
  React Hooks

BUILDING FOR PRODUCTION (advanced concepts)
  Side Effects, Refs and More React Hooks
  React's context API and Redux
  Forms, HTTP Requests and Custom Hooks
  Routing, Deployment, NextJS

===========================================================
JAVASCRIPT REFRESHER
=====================
jsbin.com

VAR was old Javascript

  var myName = 'Vijay';
  console.log(myName);

With ES6(new version of JS), LET and CONST were introduced

LET -> Variable
CONST -> Constant

  const someName = 'Vijay';
  console.log(someName);
  someName = 'Anand';
  console.log(someName);
TypeError : Assignment to constant variable

ARROW FUNCTIONS
---
  function myFunc(){...}

  Another syntax for creating javascript functions. omits the "function" keyword

  const myFunc = (name) => {
    console.log(name);
  }
No more issues with this keyword

  const multiply = (number) => {
    return number * 2
  }

can be shortened as

  const multiply = number => number * 2;
  console.log(multiply(2));

EXPORTS AND IMPORTS(MODULE)
---
person.js
  const person = {
    name: 'Max'
  }
  export default person

utility.js
  export const clean = () => {}
  export const baseData = 10

app.js
    import person from './person.js'
    import prs from './person.js'

    import { baseData } from './utility.js'
    import { clean } from './utility.js'

  default export -> You choose the name
  named export -> Name is defined by export

  import { baseData } from './utility.js'
  import { baseData as BData } from './utility.js'
  import * as bundled from './utility.js'

CLASSES
---
Classes are used by React to create COMPONENTS
Comprise of property and method
Class is instantiated using the new keyword
Supports inheritance

  class Human{
      constructor(){
        this.gender = 'Male';
      }

      showGender(){
        console.log(this.gender);
      }
  }



  class Person extends Human{
      constructor(){
        super();                -> Without super(), you would get the "ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor
        this.name = 'Hero';
      }

      printName(){
        console.log(this.name);
      }
  }

  const myPerson = new Person();
  myPerson.printName();
  myPerson.showGender();


CLASSES, PROPERTIES AND METHODS
---
Properties are like variables attached to classes/objects
Methods are like functions attached to classes/objects

ES6
constructor(){
  this.name = 'Hero';
}

ES7
name='Hero';

ES6
printName(){
  console.log(this.name);
}

ES7
printName = () => console.log(this.name);


ES6/BABEL

  class Human{
      gender = 'Male';

      showGender = () => {
        console.log(this.gender);
      }
  }

  class Person extends Human{
      name = 'Hero';

      printName = () => {
        console.log(this.name);
      }
  }

  const myPerson = new Person();
  myPerson.printName();
  myPerson.showGender();

SPREAD AND REST OPERATORS (THREE DOTS)
---

SPREAD - Used to split up array elements or object Properties

const oldArray = [1,2];
const newArray = [...oldArray, 3, 4];

console.log(newArray); -> [1, 2, 3, 4]

const oldObject = {oldProp:1};
const newObject = { ...oldObject, newProp:4};

console.log(newObject); ->

    [object Object] {
      newProp: 4,
      oldProp: 1
    }

REST - Used to merge a list of function arguments into an array

function sortArgs(...args){
  return args.sort();
}

const filter100Plus = (...args) => args.filter(item => item > 100);
console.log(filter100Plus(1,2,3,4,5,101,102,103,104,105));           -> [101, 102, 103, 104, 105]

DESTRUCTURING
---
Easily extract array elements or object properties and store them in variables

Array Destructuring -> Square Brackets
[a,b] = ['Hello','Max']

const numbers = [1,2,3];
[num1,,num3] = numbers;
console.log(num1,num3);   -> 1 3

Object Destructuring -> Curly Braces
{name} = {name:'Max', age:30}

REFERENCE AND PRIMITIVE TYPES
---
Numbers, Strings and Booleans are PRIMITIVE types. When you store the primitives in another variable, it will COPY that value

Objects and Arrays are REFERENCE based . Use spread operator if you want to copy by value instead of copying pointer
Primitives are Value based

const person1 = {
  name: 'Vijay'
}

const person2 = person1;

const person3 = { ...person1 };

console.log(person2);           -> Prints name: "Vijay"

person1.name = 'Anand'

console.log(person2);           -> Prints name: "Anand"

console.log(person3);           -> Prints name: "Vijay"

ARRAY FUNCTIONS
---

const numbers = [1,2,3];

const doubleNum = numbers.map(num => num *2)

console.log(doubleNum)                      -> [2, 4, 6]

other functions are find(), findIndex(), filter(), reduce(), concat(), slice(), splice()

EXERCISES
---
transformToObjects() function that transforms a list of numbers into a list of JavaScript objects.
For the provided input [1, 2, 3] the transformToObjects() function should return [{val: 1}, {val: 2}, {val: 3}]
  function transformToObjects(numberArray) {
      return numberArray.map(num => { return {val:num}});
  }

REFERENCE
---
Read more about let : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
Read more about const : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const
Read more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
map()  => https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
find()  => https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
findIndex()  => https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
filter()  => https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
reduce()  => https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=b
concat()  => https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat?v=b
slice()  => https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
splice()  => https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array

===========================================================
REACT BASICS: WORKING WITH COMPONENTS
=====================

Component Driven User Interfaces
Building interactive and Scalable UIs
React Core Syntax and JSX
Working with Components
Working with Data

COMPONENTS
---
React is all about components. All the user interfaces are made up of components
Reusable building blocks in your User Interface
Components are combination of HTML, CSS and JavaScript
Why Components? - Reusability(Dont Repeat Yourself)
                  Separation of Concerns(Dont do too many things in one and the same place) 

React code written in a "Declarative" way
Define the desired "target" state and let React figure out the actual javascript DOM instructions

INDEX.JS
  import ReactDOM from 'react-dom/client';

  import './index.css';
  import App from './App';

  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(<App />);

APP.JS
  import React from 'react';
  export default function App() {
      return (
          <div>
              <p>Practicing React...</p>
              <h1>Exercise done!</h1>
          </div>
      );
  }
---
app.js
  import React from 'react';
  import ExerciseComponent from './ExerciseComponent';

  export default function App() {
      return <ExerciseComponent/>
  }
ExerciseComponent.js
  import React from 'react';

  export default function ExerciseComponent() {
      return <p>First exercise - done!</p>;
  }

Note: A component in react is just a special javascript function returning HTML/JSX code

PROPS 
-----
App.js

import React from "react";

import Product from "./Product";
import "./styles.css";

// don't change the Component name "App"
export default function App() {
  const products = [
    { title: "Product 1", price: "10", description: "First product" },
    { title: "Product 2", price: "20", description: "Second product" },
  ];

  return (
    <div>
      <h1>My Demo Shop</h1>
      <Product
        title={products[0].title}
        price={products[0].price}
        description={products[0].description}
      />
      <Product
        title={products[1].title}
        price={products[1].price}
        description={products[1].description}
      />
    </div>
  );
}

Product.js 
import React from "react";

export default function Product(props) {
  return (
    <article className="product">
      <h2>{props.title}</h2>
      <p className="price">{props.price}</p>
      <p>{props.description}</p>
    </article>
  );
}

EVENT HANDLER
---
import React from "react";

import "./styles.css";

export default function App() {
  const clickHandler = () => {
    console.log("Stored!");
  };
  return <button onClick={clickHandler}>Bookmark</button>;
}

STATE
---
import React, { useState } from "react";

import "./styles.css";

export default function App() {
  const [price, setPrice] = React.useState(100);

  const clickHandler = () => {
    setPrice(75);
  };

  return (
    <div>
      <p>${price}</p>
      <button onClick={clickHandler}>Apply Discount</button>
    </div>
  );
}
---
import React, { useState } from "react";

import "./styles.css";

// don't change the Component name "App"
export default function App() {
  const textHandler = (event) => {
    if (event.target.value.trim().length > 2) {
      setWordIndicator("Valid");
    } else {
      setWordIndicator("Invalid");
    }
  };
  const [wordIndicator, setWordIndicator] = React.useState("Invalid");
  return (
    <form>
      <label>Your message</label>
      <input type="text" onChange={textHandler} />
      <p>{wordIndicator} message</p>
    </form>
  );
}
---
SETTING CURRENT STATE DEPENDING UPON PREVIOUS STATE 

import React, { useState } from "react";

import "./styles.css";

// don't change the Component name "App"
export default function App() {
  const clickHandler = () => {
    setNum((prevState) => prevState + 1);
  };
  const [num, setNum] = useState(0);

  return (
    <div>
      <form>
        <p id="counter">{num}</p>
        <button onClick={clickHandler}>Increment</button>
      </form>
    </div>
  );
}
---
Rendering Lists of Data

APP.JS
import React from 'react';

import Todo from './Todo';
import './styles.css';

const DUMMY_TODOS = [
    'Learn React',
    'Practice React',
    'Profit!'
];

// don't change the Component name "App"
export default function App() {
    return (
        <ul>
        {DUMMY_TODOS.map((todo) => <Todo text={todo}/>)}
        </ul>
    );
}

TODO.JS
import React from 'react';

export default function Todo(props) {
    return <li>{props.text}</li>;
}

---
Outputting Conditional Content

APP.JS
import React,{useState} from 'react';

// don't change the Component name "App"
export default function App() {
    const showAlert = () => {
        setIsDeleting(true);
    }
    
    const hideAlert = () => {
        setIsDeleting(false);
    }
    
    const [isDeleting, setIsDeleting] = React.useState(false);
    
    
    
    return (
      <div>
        {isDeleting && <div id="alert">
          <h2>Are you sure?</h2>
          <p>These changes can't be reverted!</p>
          <button onClick={hideAlert}>Proceed</button>
        </div>}
        <button onClick={showAlert}>Delete</button>
      </div>    
    );
}